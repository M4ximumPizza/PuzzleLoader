import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("maven-publish")
    id("java")
    id("java-library")
    id("com.github.johnrengelman.shadow") version("8.1.1")
}

group = "dev.crmodders"

repositories {
    mavenCentral()

    maven { url "https://maven.google.com/" }
    maven { url "https://maven.crmodders.dev/releases" }
    maven { url "https://maven.crmodders.dev/snapshots" }
    maven { url "https://repo.spongepowered.org/repository/maven-public/" }

    ivy {
        name "Cosmic Reach"
        url "https://cosmic-archive.netlify.app/"
        patternLayout {
            artifact "/Cosmic Reach-[revision].jar"
        }
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeGroup "finalforeach"
        }
    }
}

dependencies {
    // Mixin
    compileOnly("dev.crmodders:mixin:$puzzleMixinsVersion")

    // Asm
    implementation("org.ow2.asm:asm:$asmVersion")
    implementation("org.ow2.asm:asm-tree:$asmVersion")
    implementation("org.ow2.asm:asm-util:$asmVersion")
    implementation("org.ow2.asm:asm-analysis:$asmVersion")
    implementation("org.ow2.asm:asm-commons:$asmVersion")

    // Google
    implementation("com.google.code.gson:gson:$gsonVersion")
    implementation("com.google.guava:guava:$guavaVersion-jre")

    // Log4j
    implementation("org.apache.logging.log4j:log4j-api:$log4jVersion")
    implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")

    // Jopt Simple
    implementation("net.sf.jopt-simple:jopt-simple:$joptSimpleVersion")

    // Reflections
    implementation("org.reflections:reflections:$reflectionsVersion")

    // Graal VM Polygot
    implementation("org.graalvm.polyglot:polyglot:$graalvmVersion")
    implementation("org.graalvm.polyglot:tools:$graalvmVersion")

    // Graal VM Polygot Languages
    implementation("org.graalvm.polyglot:js:$graalvmVersion")

    // Cosmic Reach
    compileOnly("finalforeach:cosmicreach:$cosmicReachVersion")
}

tasks.register("runLoader", JavaExec) {
    group = "loader"

    dependencies {
        // Mixin
        runtimeOnly("dev.crmodders:mixin:$puzzleMixinsVersion")

        // Asm
        implementation("org.ow2.asm:asm:$asmVersion")
        implementation("org.ow2.asm:asm-tree:$asmVersion")
        implementation("org.ow2.asm:asm-util:$asmVersion")
        implementation("org.ow2.asm:asm-analysis:$asmVersion")
        implementation("org.ow2.asm:asm-commons:$asmVersion")

        // Google
        implementation("com.google.code.gson:gson:$gsonVersion")
        implementation("com.google.guava:guava:$guavaVersion-jre")

        // Log4j
        implementation("org.apache.logging.log4j:log4j-api:$log4jVersion")
        implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
        implementation("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion")

        // Sl4j
        implementation("org.slf4j:slf4j-api:$slf4jVersion")

        // Jopt Simple
        implementation("net.sf.jopt-simple:jopt-simple:$joptSimpleVersion")

        // Reflections
        implementation("org.reflections:reflections:$reflectionsVersion")

        // Event Bus
        implementation("org.greenrobot:eventbus:$eventbusVersion")

        // Cosmic Reach
        implementation("finalforeach:cosmicreach:$cosmicReachVersion")
    }

    classpath = sourceSets.main.runtimeClasspath
    mainClass = "dev.crmodders.puzzle.launch.Piece"
}

shadowJar {
    manifest {
        attributes(
                "Main-Class": "dev.crmodders.puzzle.launch.Piece"
        )
    }
}

// Maven
tasks.register("buildJars") {
    group = "loader"

    dependsOn("buildFatJar")
    dependsOn("buildSourcesJar")
}

tasks.register("buildFatJar", ShadowJar) {
    group = "loader"

    manifest {
        attributes(
                "Main-Class": "dev.crmodders.puzzle.launch.Piece"
        )
    }

    dependsOn("compileJava")
    dependsOn("processResources")

    from(processResources.destinationDir)
    from(sourceSets.main.java.classesDirectory)

    archiveFileName = "${id}-${version}-fat.jar"
}

tasks.register("buildSourcesJar", Jar) {
    group = "loader"

    from(sourceSets.main.allSource)
    archiveFileName = "${id}-${version}-sources.jar"
}

publishing {
    repositories {
        maven {
            name = "crmReleases"
            url = "https://maven.crmodders.dev/releases"
            credentials{
                username = System.getenv("CRMReleasesUsername")
                password = System.getenv("CRMReleasesPassword")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }

        maven {
            name = "crmSnapshots"
            url = "https://maven.crmodders.dev/snapshots"
            credentials{
                username = System.getenv("CRMSnapshotsUsername")
                password = System.getenv("CRMSnapshotsPassword")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    assemble.dependsOn buildSourcesJar, buildFatJar
    publications {
        maven(MavenPublication) {
            groupId = group
            if (System.getenv("COMMIT_ID") != null) {
                artifactId = System.getenv("COMMIT_ID")
            } else {
                artifactId = id
            }

            artifact buildFatJar
            artifact source: buildSourcesJar, classifier: 'source', extension: 'jar'
        }
    }
}
